//
// database_result.cpp
// ~~~~~~~~~~~~~~~~~~~
//
// Author: Joseph Adomatis
// Copyright (c) 2020 Joseph R Adomatis (joseph dot adomatis at gmail dot com)
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <cstring>
#include <dewey/dewey.hpp>
#include <iostream>
#include <postgresql/libpq-fe.h>
#include <string>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global variable definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global function definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// dewey::DatabaseResult member definitions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Constructor
///////////////////////////////////////////////////////////////////////////////

dewey::DatabaseResult::DatabaseResult(PGresult *result)
{
    this->columnCount = PQnfields(result);
    this->index = -1;
    this->onRow = false;
    this->rowCount = PQntuples(result);
    this->resultSet = result;    
}

///////////////////////////////////////////////////////////////////////////////
// dewey::DatabaseResult::getField(int)
///////////////////////////////////////////////////////////////////////////////

std::string dewey::DatabaseResult::getField(const int fieldID)
{
    std::string returnValue;
    
    bool goodStatus{false};
    goodStatus |= PQresultStatus(this->resultSet) == PGRES_TUPLES_OK;
    goodStatus |= PQresultStatus(this->resultSet) == PGRES_SINGLE_TUPLE;

    bool goodField{this->onRow};
    goodField &= fieldID >= 0;
    goodField &= fieldID < this->columnCount;
    
    if(goodStatus && goodField){
        returnValue.append(PQgetvalue(this->resultSet, this->index, fieldID));
    }
    return(std::move(returnValue));
}

///////////////////////////////////////////////////////////////////////////////
// dewey::DatabaseResult::getField(string)
///////////////////////////////////////////////////////////////////////////////

std::string dewey::DatabaseResult::getField(const std::string& fieldName)
{
    int fieldID{PQfnumber(this->resultSet, fieldName.c_str())};
    std::string returnValue{this->getField(fieldID)};
    return(std::move(returnValue));
}

///////////////////////////////////////////////////////////////////////////////
// dewey::DatabaseResult::hasNext
///////////////////////////////////////////////////////////////////////////////

bool dewey::DatabaseResult::hasNext()
{
    return((this->index + 1) < this->rowCount);
}

///////////////////////////////////////////////////////////////////////////////
// dewey::DatabaseResult::next
///////////////////////////////////////////////////////////////////////////////

bool dewey::DatabaseResult::next()
{
    if(this->index < this->rowCount)
    {
        this->index++;
    }
    bool goodNext{true};
    goodNext &= this->index >= 0;
    goodNext &= this->index < this->rowCount;
    this->onRow = goodNext;
    return(goodNext);
}

///////////////////////////////////////////////////////////////////////////////
// Deconstructor
///////////////////////////////////////////////////////////////////////////////

dewey::DatabaseResult::~DatabaseResult()
{
    PQclear(this->resultSet);
    this->resultSet = nullptr;
}